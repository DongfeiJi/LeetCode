###冒泡排序：
1，比较相邻的元素。如果第一个比第二个大，就交换它们两个；
2，对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；
3，针对所有的元素重复以上的步骤，除了最后一个；
4，重复步骤1~3，直到排序完成。
* A代表平均时间复杂度
* B代表最坏时间复杂度
* E代表最好时间复杂度
* 省略了O()
###简单冒泡排序
for (int i = 1 ; i<length; i++) {//n个数，只需要冒泡n-1个，所以从1开始
        for (int j = 0 ; j<length - i; j++) {//j<length-1是因为冒泡过的要去掉，比如冒泡第一个，只用比较length-1个数即可
            if(arr[j]>arr[j+1]){//前一个比后一个大，交换
                exchangee(arr, j, j+1);
            }
        }
    }


####外层循环优化冒泡排序
(交换排序; 时间A:N^2 , B:N^2 , E:N; 空间1; 稳定)
/*
如果用一个flag来判断一下，当前数组是否已经有序,有序就退出循环，可以提高冒泡排序的性能。
*/
    for (int i = 1; i<length; i++) {//n个数，只需要冒泡n-1个，所以从1开始
        bool flag = true;//初始标记当前数组已经有序，反向初始化
        for (int j = 0; j < length -i; j++) {
            if (arr[j]>arr[j+1]) {
                exchangee(arr, j, j+1);
                flag  =false;//当前轮交换了就设定flag为无序
            }
        }
        if (flag) {//直到某一轮，全部有序，那么flag就不会被设置为false，此时就可以跳出
            break;
        }
    }

####内层循环优化冒泡排序
(交换排序; 时间A:N^2 , B:N^2 , E:N ; 空间1 ; 稳定）
/*
    (1)完美冒泡
    (2)再用last标记一下最后一个发生交换的数，
       下次可以减少循环次数。其中第一次内部循环的控制条件，单独拿出来。
*/