/*
LL今天心情特别好,因为他去买了一副扑克牌,发现里面居然有2个大王,2个小王(一副牌原本是54张^_^)...
他随机从中抽出了5张牌,想测测自己的手气,看看能不能抽到顺子,如果抽到的话,他决定去买体育彩票,嘿嘿！！
“红心A,黑桃3,小王,大王,方片5”,“Oh My God!”不是顺子.....LL不高兴了,
他想了想,决定大\小 王可以看成任何数字,并且A看作1,J为11,Q为12,K为13。
上面的5张牌就可以变成“1,2,3,4,5”(大小王分别看作2和4),“So Lucky!”。
LL决定去买体育彩票啦。 现在,要求你使用这幅牌模拟上面的过程,然后告诉我们LL的运气如何，
如果牌能组成顺子就输出true，否则就输出false。为了方便起见,你可以认为大小王是0。

这题说了一堆，提取主要信息，我们不难整理出，满足如下条件才可以认为是顺子：
输入数据个数为5；
输入数据都在0-13之间；
没有相同的数字；
最大值与最小值的差值不大于5。
PS：大小王可以当成任意数。
这里可以使用一个技巧，即利用一个flag记录每个数字出现的次数。具体实现直接看代码吧，代码有详细注释。

算法核心：顺子核心就是五个，最大减去最小小于等于5，因为大小王作为0，并且每个数只出现一次（flag实现）
flag实现分析;flag = 0000000,来一个5，flag |= 1 << 5;，falg变为100000，再来一个5，if((flag >> curNum) & 1 == 1)
实现原理总结就是，对于存入的数，先将1左移这么多位，这里要改变flag累计，所以是 |=。
对于新来的数的判断，就是先将flag右移新来的数这么多的位，再和1进行与比较。所以是先判断，没出现在进行flag更新，否则直接返回false
1，非法输入，判定size小于5，一定不是顺子，返回false
2，初始化最大值和最小值，一般都是反向初始化，保证一定不会错，证明算法有效性，也是为了直接返回false、
3，定义flag标志，初始化为0
4，for循环输入数组
定义表示当前判断的数
非法输入判定，即大于k13，或者小于大王0
遇到大小王0 continue
这里一定要if先判断当前数是否出现过，这里利用将flag右移当前值的位数，并且与1进行与操作，如果等于1，证明该数出现过，返回false
没出现过往下继续，当前数更新flag，这里由于flag要存入数组的全部数的次数，利用 |=将1左移动当前值的位数
如果当前值小于最小值，更新最小值为当前值
如果当前值大于最大值，更细最大值为当前值
最后，if判断，当前是不是是一个顺子，就是利用max-min大于5，就返回false
5，上面都没返回false，就返回true
*/
class Solution {
public:
    bool IsContinuous( vector<int> numbers ) {
        if(numbers.size() < 5){//输入不足5张牌
            return false;
        }
        int min = 14, max = -1;//最大最小值变量
        int flag = 0;//记录某牌出现的次数
        for(int i = 0; i < numbers.size(); i++){
            int curNum = numbers[i];//当前值
            if(curNum < 0 || curNum > 13){//非法输入
                return false;
            }
            if(curNum == 0){// 大小王，可以模拟任意数，continu一定再下面判断该数出现过之前！！！！！
                continue;
            }
            if((flag >> curNum) & 1 == 1){//对当前输入，判定之前是否出现过
                return false;
            }
            flag |= 1 << curNum;// 按位保存数字出现次数，比如0110表示，0出现0次，1出现1次，2出现1次，3出现0次。
            // 更新最小值
            if(curNum < min){
                min = curNum;
            }
            // 更新最大值
            if(curNum > max){
                max = curNum;
            }
            // 超过范围一定不是顺子
            if(max - min >= 5){//这里注意一定是大于等于5，如顺子123435，max-min=5-1=4
                return false;
            }
        }
        return true;
    }
};