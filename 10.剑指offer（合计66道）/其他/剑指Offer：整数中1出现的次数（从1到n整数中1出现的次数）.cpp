/*
求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？为此他特别数了一下1~13中包含1的数字
有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,
可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。

两种方法
一种是从1到n遍历，每次通过对10求余数判断整数的个位数字是不是1，
大于10的除以10之后再判断。我们对每个数字都要做除法和求余运算以求出该数字中1出现的次数。
如果输入数字n，n有O(logn)位，我们需要判断每一位是不是1，那么时间复杂度为O(n*logn)。这样做，计算量大，效率不高。
class Solution {
public:
    int NumberOf1Between1AndN_Solution(int n){
        int result = 0;
        for(int i =1; i <= n;i++){
            result += calculate(i);
        }
        return result;
    }
    int calculate(int n){
        int count = 0;
        int num = 0;
        while(n){
            num = n % 10;
            if(num == 1){
                count++;
            }
            n /= 10;
        }
        return count;
    }
};

采用数学之美上面提出的方法，设定整数点（如1、10、100等等）作为位置点i（对应n的各位、十位、百位等等），
分别对每个数位上有多少包含1的点进行分析。
根据设定的整数位置，对n进行分割，分为两部分，高位n/i，低位n%i，下面先分析百位三种情况，然后总结
1，当i表示百位，且百位对应的数>=2,如n=31456,i=100，则a=314,b=56，此时百位为1的次数有a/10+1=32（最高两位0~31）
，此段等价于[00~31]1??，即共有(a/10+1)*100个点的百位为1
2，当i表示百位，且百位对应的数为1，如n=31156,i=100，则a=311,b=56，此时百位左边部分百位为1的次数共有a/10(最高两位0-30)
，此段等价于[00~30]1??，即共有(a/10)*100个点的百位为1
，然而特殊情况百位右边部分还有出现的1，当最高两位为31（即a=311），
，此段等价于311[00~56]?，即共有b+1个点的百位为1
此时，所有点加起来共有（a/10*100）+(b+1)，这些点百位对应为1
3，当i表示百位，且百位对应的数为0,如n=31056,i=100，则a=310,b=56，此时百位为1的次数有a/10=31（最高两位0~30）
，此段等价于[00~30]1??，即共有(a/10)*100个点的百位为1
最终结果是累计综合以上三种情况，当百位对应0或>=2时，有(a+8)/10次包含所有100个点，还有当百位为1(a%10==1)，需要增加局部点b+1
之所以补8，是因为当百位为0，则a/10==(a+8)/10，当百位>=2，补8会产生进位位，效果等同于(a/10+1)
此方法真的是太优秀了。。。。。。。。。。。。。。。。
算法：
1,定义count = 0
2，for循环1到n，i是i*10，主要是判定有多少进位位
对于一个i，如100，计算高位用/，地位用%
count累计左边的累计，注意补8综合情况1和3，还要加上判断百位为1(a%10==1)，计算右侧局部的次数
3，return
class Solution {
public:
    int NumberOf1Between1AndN_Solution(int n){
        int count = 0;
        for(int i = 1; i <= n; i *= 10){//用循环来判断输入的n是别，百位级别还是？？
            int a = n / i, b = n % i;//a是高位，b是底位
            count += (a + 8) / 10 * i + (a % 10 == 1) * (b + 1);
            //总结了情况1和2，最后综合三种情况累计，+=是累计个位十位百位
        }
        return count;
    }
};
*/
class Solution {//最最简化版本在注释里面
public:
    int NumberOf1Between1AndN_Solution(int n){
        int count = 0;
        for(int i = 1; i <= n; i *= 10){
            int a = n / i, b = n % i;
            if(a % 10 >= 2){//如n=31456,i=100，则a=314,b=56
                count += (a / 10 + 1) * i;//此时等价于[00~31]1??，即共有(a/10+1)*100个点的百位为1
            }
            else if(a % 10 == 0){//如n=31056,i=100，则a=310,b=56
                count += ( a / 10) * i;//此时等价于[00~30]1??，即共有(a/10)*100个点的百位为1
            }
            else if(a % 10 == 1){//如n=31156,i=100，则a=311,b=56，这时由于低位产生了限制，故拆开分析
                //等价于[00~30]1??，即共有(a/10)*100个点的百位为1
                //+价于311[00~56]?，即共有b+1个点的百位为1
                count += (a / 10) * i + b + 1;
            }
        }
        return count;
    }
};